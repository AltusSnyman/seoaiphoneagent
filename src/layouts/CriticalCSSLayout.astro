---
export interface Props {
	title: string;
	description?: string;
	keywords?: string;
	canonical?: string;
	ogImage?: string;
}

const { 
	title, 
	description = "AI Phone Agent provides 24/7 virtual receptionist services with intelligent call handling, appointment booking, and customer support automation for businesses.",
	keywords = "AI phone agent, virtual receptionist, AI call center, automated phone system, business phone automation",
	canonical = Astro.url.toString(),
	ogImage = "/og-image.jpg"
} = Astro.props;

// Read critical CSS content
import { readFileSync } from 'fs';
import { resolve } from 'path';

let criticalCSS = '';
try {
  criticalCSS = readFileSync(resolve('./src/styles/critical.css'), 'utf-8');
} catch (err) {
  console.warn('Critical CSS file not found');
}
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="robots" content="index, follow" />
		<link rel="canonical" href={canonical} />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Critical Resource Hints -->
		<link rel="preload" href="/logo.png" as="image" type="image/png" />
		<link rel="preload" href="/images/hero-business-team.jpg" as="image" type="image/jpeg" />
		<link rel="dns-prefetch" href="//fonts.googleapis.com" />
		<link rel="dns-prefetch" href="//fonts.gstatic.com" />
		<link rel="dns-prefetch" href="//images.unsplash.com" />
		<meta name="theme-color" content="#00A3FF" />
		
		<!-- Optimized Font Loading -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		
		<!-- Critical Fonts - Load immediately -->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Montserrat:wght@700;800&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'" />
		<noscript>
			<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Montserrat:wght@700;800&display=swap" />
		</noscript>
		
		<!-- Non-critical fonts - Load deferred -->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;500&family=Montserrat:wght@400;500;600&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'" />
		
		<title>{title}</title>
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonical} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:site_name" content="AI Phone Agent" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={canonical} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={ogImage} />
		
		<!-- Critical CSS Inline -->
		<style set:html={criticalCSS}></style>
		
		<!-- Schema.org JSON-LD -->
		<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": ["ProfessionalService", "SoftwareApplication"],
			"name": "AI Phone Agent",
			"description": "Advanced AI phone answering service providing 24/7 virtual receptionist capabilities for businesses.",
			"url": "https://aiphoneagent.ai",
			"applicationCategory": "BusinessApplication",
			"operatingSystem": "Cloud-based",
			"offers": {
				"@type": "AggregateOffer",
				"lowPrice": "199",
				"highPrice": "999",
				"priceCurrency": "USD",
				"priceSpecification": {
					"@type": "UnitPriceSpecification",
					"unitText": "per month"
				}
			},
			"aggregateRating": {
				"@type": "AggregateRating",
				"ratingValue": "4.9",
				"reviewCount": "247",
				"bestRating": "5"
			},
			"telephone": ["+1-877-320-7259", "+61-2-3821-3526"],
			"email": "hello@aiphoneagent.ai"
		}
		</script>
	</head>
	<body>
		<slot />
		
		<!-- Load Non-Critical CSS Asynchronously -->
		<link rel="preload" href="/src/styles/non-critical.css" as="style" onload="this.onload=null;this.rel='stylesheet'" />
		<noscript>
			<link rel="stylesheet" href="/src/styles/non-critical.css" />
		</noscript>
		
		<!-- Critical CSS Loading Script -->
		<script>
			// Function to load CSS asynchronously
			function loadCSS(href, before, media) {
				var doc = window.document;
				var ss = doc.createElement("link");
				var ref;
				if (before) {
					ref = before;
				} else {
					var refs = (doc.body || doc.getElementsByTagName("head")[0]).childNodes;
					ref = refs[refs.length - 1];
				}
				var sheets = doc.styleSheets;
				ss.rel = "stylesheet";
				ss.href = href;
				ss.media = "only x";
				function ready(cb) {
					if (doc.body) return cb();
					setTimeout(function() {
						ready(cb);
					});
				}
				ready(function() {
					ref.parentNode.insertBefore(ss, (before ? ref : ref.nextSibling));
				});
				var onloadcssdefined = function(cb) {
					var resolvedHref = ss.href;
					var i = sheets.length;
					while (i--) {
						if (sheets[i].href === resolvedHref) {
							return cb();
						}
					}
					setTimeout(function() {
						onloadcssdefined(cb);
					});
				};
				function loadCB() {
					if (ss.addEventListener) {
						ss.removeEventListener("load", loadCB);
					}
					ss.media = media || "all";
				}
				if (ss.addEventListener) {
					ss.addEventListener("load", loadCB);
				}
				ss.onloadcssdefined = onloadcssdefined;
				onloadcssdefined(loadCB);
				return ss;
			}
			
			// Load non-critical styles after page load
			window.addEventListener('load', function() {
				// Load component-specific CSS files
				loadCSS('/src/styles/non-critical.css');
			});
			
			// Preload critical images for better LCP
			if ('IntersectionObserver' in window) {
				const imageObserver = new IntersectionObserver((entries, observer) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							const img = entry.target;
							img.src = img.dataset.src;
							img.classList.remove('lazy');
							imageObserver.unobserve(img);
						}
					});
				});
				
				document.addEventListener('DOMContentLoaded', () => {
					const lazyImages = document.querySelectorAll('img[data-src]');
					lazyImages.forEach(img => imageObserver.observe(img));
				});
			}
		</script>
	</body>
</html>