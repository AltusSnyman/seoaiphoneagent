---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
  sizes?: string;
  objectFit?: 'cover' | 'contain' | 'fill';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className, 
  loading = 'lazy',
  priority = false,
  sizes = '100vw',
  objectFit = 'cover'
} = Astro.props;

// Generate responsive image URLs for better performance
const generateSrcSet = (baseSrc: string) => {
  // For Unsplash images, generate different sizes
  if (baseSrc.includes('unsplash.com')) {
    const baseUrl = baseSrc.split('?')[0];
    const params = new URLSearchParams(baseSrc.split('?')[1] || '');
    
    return [
      `${baseUrl}?w=400&${params.toString()} 400w`,
      `${baseUrl}?w=800&${params.toString()} 800w`,
      `${baseUrl}?w=1200&${params.toString()} 1200w`,
      `${baseUrl}?w=1600&${params.toString()} 1600w`
    ].join(', ');
  }
  
  return src;
};

const srcset = generateSrcSet(src);
---

<img
  src={src}
  srcset={srcset}
  alt={alt}
  width={width}
  height={height}
  sizes={sizes}
  loading={priority ? 'eager' : loading}
  decoding={priority ? 'sync' : 'async'}
  class={`performance-img ${className || ''}`}
  style={{
    objectFit: objectFit,
    aspectRatio: width && height ? `${width}/${height}` : 'auto'
  }}
/>

<style>
  .performance-img {
    width: 100%;
    height: auto;
    border-radius: inherit;
    transition: all 0.3s ease;
  }
  
  /* Progressive enhancement for modern browsers */
  @supports (aspect-ratio: 16/9) {
    .performance-img {
      aspect-ratio: var(--aspect-ratio, auto);
    }
  }
  
  /* Blur-up technique for smoother loading */
  .performance-img[data-loaded="false"] {
    filter: blur(5px);
    transform: scale(1.05);
  }
  
  .performance-img[data-loaded="true"] {
    filter: blur(0);
    transform: scale(1);
  }
</style>

<script>
  // Add progressive loading effect
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.performance-img');
    
    images.forEach((img) => {
      img.setAttribute('data-loaded', 'false');
      
      img.addEventListener('load', () => {
        img.setAttribute('data-loaded', 'true');
      });
      
      // If image is already loaded
      if (img.complete) {
        img.setAttribute('data-loaded', 'true');
      }
    });
  });
</script>