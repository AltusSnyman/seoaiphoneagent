---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  priority?: boolean;
  placeholder?: boolean;
  objectFit?: 'cover' | 'contain' | 'fill';
  sizes?: string;
}

const { 
  src, 
  alt, 
  width = 800, 
  height = 600, 
  class: className, 
  priority = false,
  placeholder = true,
  objectFit = 'cover',
  sizes = '100vw'
} = Astro.props;

// Generate low-quality placeholder
const placeholderSrc = src.includes('unsplash.com') ? 
  `${src.split('?')[0]}?w=20&q=20&blur=5` : 
  src;

// Generate responsive srcset
const srcset = src.includes('unsplash.com') ? 
  [400, 800, 1200, 1600].map(w => `${src.split('?')[0]}?w=${w}&q=80 ${w}w`).join(', ') :
  src;
---

<div class={`lazy-image-container ${className || ''}`}>
  {placeholder && !priority && (
    <img 
      src={placeholderSrc}
      alt=""
      class="lazy-placeholder"
      width={width}
      height={height}
      style={{
        objectFit,
        aspectRatio: `${width}/${height}`
      }}
      aria-hidden="true"
    />
  )}
  
  <img
    src={src}
    srcset={srcset}
    alt={alt}
    width={width}
    height={height}
    sizes={sizes}
    loading={priority ? 'eager' : 'lazy'}
    decoding={priority ? 'sync' : 'async'}
    class={`lazy-image ${priority ? 'priority' : ''}`}
    style={{
      objectFit,
      aspectRatio: `${width}/${height}`
    }}
    data-loaded="false"
  />
</div>

<style>
  .lazy-image-container {
    position: relative;
    overflow: hidden;
    background-color: rgba(0, 163, 255, 0.05);
    border-radius: inherit;
  }
  
  .lazy-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    filter: blur(10px) brightness(0.9);
    transform: scale(1.1);
    opacity: 1;
    z-index: 1;
    transition: opacity 0.3s ease;
  }
  
  .lazy-image {
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 2;
    position: relative;
  }
  
  .lazy-image.priority {
    opacity: 1;
  }
  
  .lazy-image[data-loaded="true"] {
    opacity: 1;
  }
  
  .lazy-image[data-loaded="true"] + .lazy-placeholder {
    opacity: 0;
  }
  
  /* Modern aspect ratio support */
  @supports (aspect-ratio: 1) {
    .lazy-image-container {
      aspect-ratio: var(--aspect-ratio, auto);
    }
  }
  
  /* Performance optimizations */
  .lazy-image {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
    will-change: opacity;
  }
</style>

<script>
  // Enhanced lazy loading with Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('.lazy-image:not(.priority)');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            
            // Add load event listener
            img.addEventListener('load', () => {
              img.setAttribute('data-loaded', 'true');
              
              // Remove placeholder after a brief delay
              setTimeout(() => {
                const placeholder = img.parentElement?.querySelector('.lazy-placeholder');
                if (placeholder) {
                  placeholder.remove();
                }
              }, 300);
            });
            
            // Stop observing this image
            observer.unobserve(img);
            
            // If already loaded (cached)
            if (img.complete) {
              img.setAttribute('data-loaded', 'true');
            }
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });
      
      lazyImages.forEach(img => {
        imageObserver.observe(img);
      });
    } else {
      // Fallback for browsers without Intersection Observer
      lazyImages.forEach(img => {
        (img as HTMLImageElement).setAttribute('data-loaded', 'true');
      });
    }
  });
</script>