---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
  objectFit?: 'cover' | 'contain' | 'fill';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className, 
  loading = 'lazy',
  priority = false,
  objectFit = 'cover'
} = Astro.props;

// Convert to WebP if it's not already
const isWebP = src.includes('.webp');
const webpSrc = isWebP ? src : src.replace(/\.(jpg|jpeg|png)(\?.*)?$/i, '.webp$2');

// Create fallback src for non-WebP browsers
const fallbackSrc = src;
---

<picture class={className}>
  <!-- WebP source for modern browsers -->
  <source srcset={webpSrc} type="image/webp" />
  
  <!-- Fallback for older browsers -->
  <img
    src={fallbackSrc}
    alt={alt}
    width={width}
    height={height}
    loading={priority ? 'eager' : loading}
    decoding={priority ? 'sync' : 'async'}
    style={objectFit ? `object-fit: ${objectFit}` : undefined}
    class="optimized-image"
  />
</picture>

<style>
  .optimized-image {
    width: 100%;
    height: auto;
    border-radius: inherit;
    transition: all 0.3s ease;
  }
  
  picture {
    display: block;
    width: 100%;
    height: 100%;
  }
  
  /* Ensure consistent aspect ratio */
  picture img {
    width: 100%;
    height: 100%;
    object-fit: var(--object-fit, cover);
  }
</style>